Lecture 1:
Refactoring API Features
-how to refactor API features we have implemented
-we will create a class for each of these API
-we will create a resuable module
-create a utils folder

Lecture 2:
Aggregation Pipeline Matching and Grouping
-Aggregation and pipeline are very important mongodb framework for data aggregation
-we define a pipeline where all the documents from a certain collection are processed step by step inorder to transform
them to aggregated results
-we can use this to calculate averages

Lecture 3:
Aggregation pipeline Unwinding and Projecting
-we will solve a business prob
-we will implement the bussiest month of the year
-we need to calculate how many tours start at the beginning of the month to solve the problem
-we have a situation where we have multiple adventures ie snow adventure, forest hiker, mountain climber and each is carried out 3 times a year
-so there are scenarios where we have months that have 2 of these activites
-we use aggregation pipeline to determine the busiest months
127.0.0.1:8080/api/v1/tours/monthly-plan/2021
-we break the tour startDates tht contain 2021

Lecture 4:
Virtual Properties
-go to tourModel
-virtual properties are fields we can define on our schema bt will not be persisted
-eg a conversion from miles to km and vise versa
-virtuaal properties cannot be used in the query bse they r not in tht database

Lecture 5:
Document Middleware:
-mongoose has concept of middleware
-we can make something when data is saved to documents
-mongoose middleware is called preand post hooks bse we can define functions to run before and after running
certain events

Types of middleware in mongoose
--documents
--query
--aggregate
--model middleware

**we will talk abt document middleware wch acts on the currrent processed document
-we create a new tour of save or create to trigger command

-we will create a slug for our document
A slug is a string we put in the uRL
--***********npm i slugify*********

Lecture 6:
Querying Middleware
-this is a middleware tht allows us run function b4 or after a certain function is executed
-the filter we created doesnot work when we use findbyid
-wch is find1
-we use a reqular exp to sortit out for all commands tht start with find

Lecture 7:
Aggregation Middleware:
-this allows us to add hooks before or after an aggregation occurs
--in aggregation, secrettours are still being used
-to filter out the secretTOurs, we add a match at the beginning of the pipeline array

Lecture 8:
Data validation built-in validators
-validation is checking if the entered values are in the ryt format for each fied in the documnt schema and tht 
all tht data has been entered.
-Sanitization is to make sue tht imput data is clean and not malicious code
-we remove unwanted characters from the input data
__this is a very important step, and so we need to sanitize tht data coming from the user

Lecture 9:
Data validation Custom validators
-sometimes builtin validators are not enough so we build our own validators
-validators are basically functions wch return true or false, if it returns false, then there is an error
-if true, validation is correct
-we will try to create custom validators to check if the price discount is lower thn the price itself
-we also have npm packages for validators tht help us perform custom validation
ie validators github
*************npm i validator************