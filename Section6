AUTHENTICATION, AUTHORIZATION AND SECURITY
Lecture 1:
Modelling Users:
-this is all about users singing up, logging in and accessing pages or routes
that we grant them permission to do
-so we implement the user model then create new users in our database

Lecture 2:
Creting New User:
-create new users based on our models
-all funcs related to auth will be in authentication controller
-in the postman, we implement the user/signup

Lecture 3:
Managing Passwords
-Managing users passwords in the database by 1st validating if the input password is equal to
confrim password and also encrypt password in the database to secure it from attackss
-to make the email unique, i used

******npm install --save mongoose-unique-validator**********
and used it in the project

-one thing with authentication is to never store plain passwords in a databse
-we have to encrypt users passwords
-we can do this in the model bse it deals with the data itself
-we will use the document pre save middleware

-we need to install bcrypt package

**************npm i bcryptjs************

the higher the cost parameter, the higher the cpu intensty and the better the quality of password hashes

Lecture 4:
How to Authenticate with JWT Works
-how to implement user authentication and authorization ie allowing users login and interact with the protected resources
tht non logged in users cannot access.

JWT----(JSON WEB TOKEN)
-these are a stateless solution for authentication so no need to store any session state on the server
-this is gd for restful APIs wch are always stateless

--alternatively,we can store the users login state on the server using sessions

How authentiation works with JSON web tokens

--how a user logs into our database
Users clients make a post request with User name or email and password
=the app then checks if the user exists and the password is correct
=then a unique JSON web token for only tht user is created using a secret string stored on the server
=the server then sends back the JWT back to client wch will be stored either in cookie or local storage so the
user is authenticated and logged into our app without leaving any state on the server
-so the server doesnot know wch users are actually logged in bt the user knws bse he has a valid JWT

--so everytime the user wants to access a protect route like his profile data, JWT is sent along with the request

--if the request hits the server, the app will verify if the JSON web token is actually valid
-if valid, the requested data will be sent to the client, if not there is an error telling the user he's not allowed 
to access the resource

-all this communication mst happen on https to avoid getting access to password and token

Detail of JWT:
-JWT is an encoding string made of 3 parts
*Header,--meta data abt the token its self
Payload -- data we can encode into the token
and signature -- this is created using header, payload and secret to create signature saved in the server
this is called signing the web token

--the server then performs verification of web token to access protected route by creating a test signature to confirm with
the original token similar with password verification process

--the user is then authenticated

Lecture 5:
signing Up Users:
-we will implement our signup then signin
-authentication is a bit of complicated and shd be implemented well
-we will not implement the authentication using a library
-the challenge of creating the user with the signup in the prev lecture is tht anyoone
can specify the role as an admin

--with method 2, we allow user signin only with the data we need to be put into a newUser
-so here we cant register as an admin and toregister as an admin, we create a new user manaully then move to mongodb compass and edit the
roles
-how do we log the new user the moment he signs up
-we sign a JWT and send it back to the user

*******npm i jsonwebtoken********************************

-we can store our secret files in our config file

-we can check the verification using JWT.io

Lecture 6:
Logging in Users:
-we will implement logging in users based on a given password and email
-logging in basically means sign a JSON web token and send it back to the client
-here we only issue the token when the user actually exists
and the password is correct

-its not a good pratice to leak password data to the client
-if we are selecting a field tht is not defined, we use a + sign

Incorrect email or password is used instead of specifying whether the email or password is 
incorrect to avoid hackers from figuring out what exactly is not working

Lecture 7:
Protecting Tour Routes
-How do we use the created JSON web tokens to give the logged in users access to protected routes
-this is the second step of authentication
-if we wish to protect the getAllTOurs route where we allow only logged in users access to a list of 
all tours
-so before running the getAllTOurs, we will need to run some checks to verify if the user is logged in or not
-we use a middleware function to perform this.

-we implement header check in postman by clicking the get all tours
-we need to send JSON token as the header,
-we use a header Authorization(key) and value(Bearer 'actual value'
-the actual value is the token

Lecture 8:
Protecting tour routes 2:
-implementing the verification step to check is someone manipulated the data or not
-the docoded value gives us the id of the user wch we can check out in mongoAtlas
-if we try to change the token or it expires,it gives us a jwt token error


2)if the user tries to access the app with expired token
-to implement this, we will change the time it tkes for the tken to expire

-if the user is deleted in the mean time, the token will still exist bt the user is nolonger there
-what if the user changes the password after issuing the token

Lecture 9:
Advanced Postman Setup:
-concept of environment
**this is a context for where our app is running and we can specify a variable for each of these environments
=click setting icon in the topright corner
-we specify the dev and prod env
-URL replaces the variable coming from our env

--copying token an placing it in the bearer header
-we do this at login and signup with some code
-we use the test tab to create the env varialble
-we do this for the login tab as well

Lecture 10
Authorization User Roles and Permissions
-how to delete tour based on authorization to enable certain users
perform certain operations based on their functionalities




Lecture 11:
Passwords Rest Functionality
-to implement password, the user sends an email wch gives us access to change our email


Lecture 12:
Sending Emails with NodeMailer:
-send password resend token using email to user
-we will do this in the utiltiy folder cal the file email.js
-install NodeMailer
**************npm i nodemailer*******************

--we then use mailtrap to fake how email will look like in prod

Lecture 13:
Password reset Functionality setting New Password

Lecture 14:
Updating the current User Password
-how to enable a logged in user update password without going through the forgot password route
-

Lecture 15:
Updating the current user: data
-we will allow the currently logged in user to manipulate his user data
-by implementing user updates, we are leaving the authController and moving to the userController

