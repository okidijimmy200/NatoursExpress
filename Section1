Install express

***********npm i express**********

run nodemon then test our api

Lecture 2:
APIs and RESTFUL Design
API---piece of software tht can be used by other piece of software
to allow applications talk to each other

WEB APIs
-we build an app tht sends data to client when a request comes in.

REST ARCTECTURE TO BUILD APIs
-(Representational State Transfer)
this is a way  of building APIs in a logical way wch is easy to consume

Principles of using RESTFUL API
-Separate API into logical resources
-resources shd be exposed in strcutured resource-based URLs
-to perform CRUD, API shd use right HTTP method
-API shd send data as JSON
-RESTFUL API mst be stateless

**Separate API into logical resources
-key abstraction in rest is the resource and the data we need to share shd be
divided into logical resources

A resource is an object or representation of something tht has data associated with it
ie tours, users or reviews

**exposed in strcutured resource-based URLs
-we need to make available data with URL tht client can send requests to
ie 
    http://www.natours.com/addNewTour

    /addNewTour, /getTours--endpoint
we can have multiple endpoints

the problem with these endpoints is tht they dont follow HTTP methods inorder to actions on data

--these endpoints ie /getTour, we can jst write /tours and get to get it

GET--this is used to perform read operation on data
POST --used to create a new operation in our database
PUT/PATCH --this is used to update operation(both can send data to database)
DELETE --id shd be deleted

we have operations like login, search wch are not CRUD operations bt we can create
endpoints for them

**we use json format

**RESTFUL api mst be stateless
all state is handled on the client not the server

--each request mst have all the information necessary to process a certain request on the server

Lecture 3:
Starting Our API Handling GET Request
-the result section makes a result 0f 9 from the postmn


Lecture 4:
Handling POST REQUESTS
-the request object holds all the data abt the request tht was done
express puts the data on a middleware
-create a new middleware import in the post 
-test the request using postman

we can save all our request in a new collection
**click new collection,natours and save the request inside tht collection
-then we save new request in tht collection

--how to place data into tours-simple.json file so tht data is saved to our fictional database
-we use JSON stringify to convert text to JSON

**to read a post request in postman, we move to body-->raw-->type(json)
--we specify json to send to server

--data is then stored in tours-simplejson
--we shd not send a response twice

Lecture 5:
RESPONDING TO URL PARAMETERS
-how to define parameter ryt in your URL, read and respond to them
-how do we get only one tour
-when we need the id of an individual tour item

--we perform the request for params
ie to get item5, 127.0.0.1:8080/app/v1/tours/5
-one the console, it prints out id of 5

**we can use params to get multiple ids
app.get('/app/v1/tours/:id/:x/:y', (req, res) 
then we define the parameters in the get url in postman
127.0.0.1:8080/app/v1/tours/5/23/6
we get 3 items

--to make a parameter optional, we add a ? mark to it
****app.get('/app/v1/tours/:id/:x/:y?', (req, res) ***
so its not a must we specify it


--when we perform a get, we get one with particular id of 5

incase one sends for id of 2 items yet specified one, we use id.length
if its longer, throw an error

Lecture 6:
Handling PATCH Requests
-to update data, we use put and patch
-put, the app expects to recieve the entire new updated object
-patch, we only expect properties to be updated in the object

--if we want to change tour/3 with available data

Lecture 6:
Handling DELETE Request
-we are able to delete tours in postman
-when we send the request, it returns a 204 meaninig null

Lecture 7:
Refactoring our Routes
-how to organise our routes to look better