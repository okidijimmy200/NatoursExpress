Install express

***********npm i express**********

run nodemon then test our api

Lecture 2:
APIs and RESTFUL Design
API---piece of software tht can be used by other piece of software
to allow applications talk to each other

WEB APIs
-we build an app tht sends data to client when a request comes in.

REST ARCTECTURE TO BUILD APIs
-(Representational State Transfer)
this is a way  of building APIs in a logical way wch is easy to consume

Principles of using RESTFUL API
-Separate API into logical resources
-resources shd be exposed in strcutured resource-based URLs
-to perform CRUD, API shd use right HTTP method
-API shd send data as JSON
-RESTFUL API mst be stateless

**Separate API into logical resources
-key abstraction in rest is the resource and the data we need to share shd be
divided into logical resources

A resource is an object or representation of something tht has data associated with it
ie tours, users or reviews

**exposed in strcutured resource-based URLs
-we need to make available data with URL tht client can send requests to
ie 
    http://www.natours.com/addNewTour

    /addNewTour, /getTours--endpoint
we can have multiple endpoints

the problem with these endpoints is tht they dont follow HTTP methods inorder to actions on data

--these endpoints ie /getTour, we can jst write /tours and get to get it

GET--this is used to perform read operation on data
POST --used to create a new operation in our database
PUT/PATCH --this is used to update operation(both can send data to database)
DELETE --id shd be deleted

we have operations like login, search wch are not CRUD operations bt we can create
endpoints for them

**we use json format

**RESTFUL api mst be stateless
all state is handled on the client not the server

--each request mst have all the information necessary to process a certain request on the server

Lecture 3:
Starting Our API Handling GET Request
-the result section makes a result 0f 9 from the postmn


Lecture 4:
Handling POST REQUESTS
-the request object holds all the data abt the request tht was done
express puts the data on a middleware
-create a new middleware import in the post 
-test the request using postman

we can save all our request in a new collection
**click new collection,natours and save the request inside tht collection
-then we save new request in tht collection

--how to place data into tours-simple.json file so tht data is saved to our fictional database
-we use JSON stringify to convert text to JSON

**to read a post request in postman, we move to body-->raw-->type(json)
--we specify json to send to server

--data is then stored in tours-simplejson
--we shd not send a response twice

Lecture 5:
RESPONDING TO URL PARAMETERS
-how to define parameter ryt in your URL, read and respond to them
-how do we get only one tour
-when we need the id of an individual tour item

--we perform the request for params
ie to get item5, 127.0.0.1:8080/app/v1/tours/5
-one the console, it prints out id of 5

**we can use params to get multiple ids
app.get('/app/v1/tours/:id/:x/:y', (req, res) 
then we define the parameters in the get url in postman
127.0.0.1:8080/app/v1/tours/5/23/6
we get 3 items

--to make a parameter optional, we add a ? mark to it
****app.get('/app/v1/tours/:id/:x/:y?', (req, res) ***
so its not a must we specify it


--when we perform a get, we get one with particular id of 5

incase one sends for id of 2 items yet specified one, we use id.length
if its longer, throw an error

Lecture 6:
Handling PATCH Requests
-to update data, we use put and patch
-put, the app expects to recieve the entire new updated object
-patch, we only expect properties to be updated in the object

--if we want to change tour/3 with available data

Lecture 6:
Handling DELETE Request
-we are able to delete tours in postman
-when we send the request, it returns a 204 meaninig null

Lecture 7:
Refactoring our Routes
-how to organise our routes to look better
we are going to export handler function into its own function

Lecture 8:
middleware and the request response cycle

incoming request -------------------------------------> response-

-when a user sends a request, its sent to the server, processes the request and
the server sends a response
**middleware is used to process the request and manipulate the data
-middleware is mainly about the request
-its called middleware bse its a function executed btn receiving and sending a request
examples of middleware is parser body, logging, setting headers, router
-all middleware used in our system is called middleware stack

the request response cycle starts with the incoming requests then executing all the middleware
in the middleware stack step by step and finally sending the request to finish the cycle

Lecture 9:
Creating our own middleware
-the order in wch we place the middleare does matter alot
ie if we place custom middleware jst below route for getAlltours, it doesnot run
-this is bse the request response cycle would be broken 

-when we perform the requested at response, we get time it was requested

Lecture 10:
Using 3rd party middleware:
-we will use a middleware called morgan wch is a middleware for logging
-this helps us see a new request in the terminal

*****************npm i morgan*********************8

Lecture 11:
Implementing the user Routes
-we will have tours resource
-users resource for accounts
-
-we need to create folders for Users resource and tours resource

Lecture 12:
Creating abd mounting Routes
-we need to separate multiple codes into different files
--one file for handlers for users
--one file for handlers for tours\

-we will create one router for each resource

Lecture 13:
Creating a better file strcuture
-separate our router into new files
-create a folder for routes
-we create a folder for route handlers
-we create a serverjsfile
server.js will be our starting file and its where we will have everything related to it

=so now we need to run server.js

Lecture 14:
PARM MIDDLEWARE:
-Param middleware is middleware tht runs for certain parameters ie
'/:id' so we write middlw when we run this

--to check the param val, we use get for particular tour ie 3
-this middleware will not work for users

-we have a couple of functions in tourController wch check if the route is valid or not
-we have this code and its not good prctice to repeat code
-we will have a param middle ware to perform these tasks


--so this param middleware works for when the id is specified and displays content on the console
-if its a general get, it doesnot display any content

Lecture 15:
Chaining multiple middleware functions
--we use multiple middleware functions to perform multiple tasks at once on a request
-we create a new tour and test if it works

--we can use this to check if the user is logged in, whether he has previlledge rights

Lecture 16:
Serving Static files
-static files are files sitting in our folders tht we cant access using routes ie overview.html
--to access our files, we use a built in middleware

--to access the overview, we use the 127.0.0.1:8080/overview.html

Lecture 17:
Enviroment Variables:
-dev Enviroment
-production Enviroment

--everything not related to express is performed outside the app.js file
-we perform it in the server.js file

-in the server.js file,we check the env we are running on wch is an express env Variables

--we also have nodejs env variables

--express uses a common variable called Node n wch defines whether we are in dev or prod

--to determine wch env we want to run for express, we need to pre-pend it to our terminal

install globally before installing dev environment
******npm install -g win-node-env*************

***********NODE_ENV=development nodemon server.js********
wch sets the node env to development

--we create a config file for defining our environment variables
-wch i config
--we use .env extension to make our files look better

--we use a .env package, instal it
*******npm i dotenv*********


Lecture 18:
Setting up ES lint in vs code
-ES lint is a program tht scans our code and gets bad programming
-we can modify it to our liking

---install es lint in vs code
--then we install es lint in prettier
--es lint config prettier --for disabling fromating es lint
--eslint-plugin-prettier---shows formstting errors as we type
--js style guide eslint-config--airbnb
--eslint-plugin-node to add specific eslint rules  
******npm i eslint prettier eslint-config-prettier eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react --save-dev******