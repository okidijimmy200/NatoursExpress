SERVER SIDE RENDERING WITH PUG TEMPLATES:
Lecture 1:
Recap Server Side vs Client Side Rendering:
--server side rendering is done using html templates 

Lecture 2:
Setting Up pug in express:
--setting up pug in our natours express
--pug is a templates engine wch wu use to fill our data.
--we need to tell express wat template engine we will use
***********npm i pug***********************

Lecture 3:
First steps with pug
--simple wide space sentsive syntax for writing html
--we only write name and html here
-we can use regular html in pug

Lecture 4:
Creating Our Base Template:
--template based on other templates
--header and footer

Lecture 5:
INCLUDING FILES INTO PUG TEMPLATES:
--adding one template into another template
--add pug beautify using vs code
--then ctrl-A, then ctrl-shift-p--pug beautify 

Lecture 6:
Extending Our Base Template with Blocks
--more complex features of pug with extend

Lecture 7:
Setting up the project structure:
--restructuring our code into the MVC arch

Lecture 8:
Building the tours overview page:
--
Lecture 9:
Building the tour overview 2
--filing in the card data for each tour card

Lecture 10:
Building the tour page 1:
--building the tour detail page with mixins nd conditionals in pug

Lecture 11:
Building the tour page 2:
--we use loop to loop through all guides associated with a tour

Lecture 12:
Including a map with MapBox part 1:

Lecture 13:
Including a mp with mapbox 2:
--we checkout mapbox instead of google maps
--mapbox is an alternative to google maps
--we create an account
--click the JS web
--we then use the CDN
--then we copy the js code in the next btn into our file
into our mapbox js file
--we move back to out account to generate the acces token we need
--we move back to our mapbox design studio(start designing a map)
-we create new styles
-we can use any bt we will go for the light styles
--create a custom name for the styles
--we move back to the share and use option and click use option
--we copy the customed styled URl into our mapbox

**we can also change the default location of our map by using center

-we can checkout the mapbox js documentation

--we want the map to automatically figure out the positions of the tours based on
the json location pts
--we put all the locations on the tour on the map and the map automatically wch portion
of the map it shd display inorder to fit these pts correctly

-// we do hve acustom marker wch is not from mapbox and we can design it

Lecture 14:
Building the Login Screen:
--implemeted the pug login route and controller

Lecture 15:
Logging in Users with Our API:
--using the login API from our prev section
--we will allow users to log into our website by performing an HTTP request, AJAX call
--we do http request to login endpoint we created earlier on
--the API sends a cookie wch automatically gets stored in the browser and automatically gets sent gets sent
back with each subsequent request
--this is important for making authentication system work
--we will b working on the client side Js code
--we connect the client side with the server side using axios package.

--we are able to then see the cookie if we perform the connection wch shows us the jwt
--the browser sends this cookie along with any other request

--we install a middleware in express to get access to cookies

**********npm i cookie-parser*************
--this passes the cookie from the incoming requests

--we can use cookie to protect our route
-we add cookie in authControler

--we can access tokens from headers in postman and also cookies from the browser cookies

Lecture 16:
Logging in Users with Our API part 2:
--conditionally render the login and signup part in our client
--this rendering happens in the backend
--for pug to knw whether the user is logged in or not, we create a new middleware function
-- the reason is to check if the user is loggedin or not
--we do this in our authControler

--we implement alerts for the login successfully and the incorrect password or email
--we then redirect the user once successfully loggedin to the homepage

Lecture 17:
Logging in Users with Our API:
--implementing an alert for when the user successfully logs in
--we create a new file for alert 
--we shd have one large js file instead of all the small js code
--we use a js bundler called parsel

*****************npm i parcel-bundler@1 --save-dev************

--we  create the watch in package.json form
-- we then run the npm run 

******************npm run watch:js***********

--the indexjs file gets data from the client side

--we need to install axios
*******npm i axios***********

--we then install apolyfill we make new js features run in older browserw
***npm i @babel/polyfill*********


--there is a prob running mapbox library with parcel

--we then create the alerts

--we create a show alerts function 

Lecture 18:
Logging out Users
--secure way to logout a user
--this cookie is an httpOnly cookie meaning we cantmanipulate the cookie in our browser
--we create a new logout route tht sends a new cookie with the exact same name without a token
--we give the cookie a short expiration time wch is  similar to deleting the cookie

Lecture 19:
Rendering Error Pages to Users:
--error for wrong URl

Lecture 20:
Building the User Account Page:
--we have an account for user where we can change basic settings, update passwords, menu items, if the user
is admin or not.

Lecture 21:
Updating User data:
--updating the user data,for both name and email
--we can submit a post request to our API
--we can also use the post method ryt on the form along with the URl where the form shd be sent to
--this automatically happens with the HTML form
--challenge with this is tht it reloads to the form and requires us to have a route in the backend.
