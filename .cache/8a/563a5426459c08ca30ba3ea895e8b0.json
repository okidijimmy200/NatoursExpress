{"id":"../../node_modules/mongoose-unique-validator/index.js","dependencies":[{"name":"C:\\Users\\jimmy\\Desktop\\Express\\NatoursExpress\\package.json","includedInParent":true,"mtime":1597926899625},{"name":"C:\\Users\\jimmy\\Desktop\\Express\\NatoursExpress\\node_modules\\mongoose-unique-validator\\package.json","includedInParent":true,"mtime":499162500000},{"name":"lodash.foreach","loc":{"line":3,"column":21},"parent":"C:\\Users\\jimmy\\Desktop\\Express\\NatoursExpress\\node_modules\\mongoose-unique-validator\\index.js","resolved":"C:\\Users\\jimmy\\Desktop\\Express\\NatoursExpress\\node_modules\\lodash.foreach\\index.js"},{"name":"lodash.get","loc":{"line":4,"column":20},"parent":"C:\\Users\\jimmy\\Desktop\\Express\\NatoursExpress\\node_modules\\mongoose-unique-validator\\index.js","resolved":"C:\\Users\\jimmy\\Desktop\\Express\\NatoursExpress\\node_modules\\lodash.get\\index.js"}],"generated":{"js":"'use strict';\n\nconst each = require('lodash.foreach');\nconst get = require('lodash.get');\n\n// Function typecheck helper\nconst isFunc = (val) => typeof val === 'function';\n\nconst deepPath = function(schema, pathName) {\n    let path;\n    const paths = pathName.split('.');\n\n    if (paths.length > 1) {\n        pathName = paths.shift();\n    }\n\n    if (isFunc(schema.path)) {\n        path = schema.path(pathName);\n    }\n\n    if (path && path.schema) {\n        path = deepPath(path.schema, paths.join('.'));\n    }\n\n    return path;\n};\n\n// Export the mongoose plugin\nmodule.exports = function(schema, options) {\n    options = options || {};\n    const type = options.type || 'unique';\n    const message = options.message || 'Error, expected `{PATH}` to be unique. Value: `{VALUE}`';\n\n    // Mongoose Schema objects don't describe default _id indexes\n    // https://github.com/Automattic/mongoose/issues/5998\n    const indexes = [[{ _id: 1 }, { unique: true }]].concat(schema.indexes());\n\n    // Dynamically iterate all indexes\n    each(indexes, (index) => {\n        const indexOptions = index[1];\n\n        if (indexOptions.unique) {\n            const paths = Object.keys(index[0]);\n            each(paths, (pathName) => {\n                // Choose error message\n                const pathMessage = typeof indexOptions.unique === 'string' ? indexOptions.unique : message;\n\n                // Obtain the correct path object\n                const path = deepPath(schema, pathName) || schema.path(pathName);\n\n                if (path) {\n                    // Add an async validator\n                    path.validate(function() {\n                        return new Promise((resolve) => {\n                            const isSubdocument = isFunc(this.ownerDocument);\n                            const isQuery = this.constructor.name === 'Query';\n                            const parentDoc = isSubdocument ? this.ownerDocument() : this;\n                            const isNew = typeof parentDoc.isNew === 'boolean' ? parentDoc.isNew : !isQuery;\n\n                            let conditions = [];\n                            each(paths, (name) => {\n                                let pathValue;\n\n                                // If the doc is a query, this is a findAndUpdate\n                                if (isQuery) {\n                                    pathValue = get(this, '_update.' + name) || get(this, '_update.$set.' + name);\n                                } else {\n                                    pathValue = get(this, isSubdocument ? name.split('.').pop() : name);\n                                }\n\n                                // Wrap with case-insensitivity\n                                if (get(path, 'options.uniqueCaseInsensitive') || indexOptions.uniqueCaseInsensitive) {\n                                    // Escape RegExp chars\n                                    pathValue = pathValue.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n                                    pathValue = new RegExp('^' + pathValue + '$', 'i');\n                                }\n\n                                conditions.push({ [name]: pathValue });\n                            });\n\n                            if (!isNew) {\n                                // Use conditions the user has with find*AndUpdate\n                                if (isQuery) {\n                                    each(this._conditions, (value, key) => {\n                                        conditions.push({ [key]: { $ne: value } });\n                                    });\n                                } else if (this._id) {\n                                    conditions.push({ _id: { $ne: this._id } });\n                                }\n                            }\n\n                            // Obtain the model depending on context\n                            // https://github.com/Automattic/mongoose/issues/3430\n                            // https://github.com/Automattic/mongoose/issues/3589\n                            let model;\n                            if (isQuery) {\n                                model = this.model;\n                            } else if (isSubdocument) {\n                                model = this.ownerDocument().model(this.ownerDocument().constructor.modelName);\n                            } else if (isFunc(this.model)) {\n                                model = this.model(this.constructor.modelName);\n                            }\n\n                            model.where({ $and: conditions }).countDocuments((err, count) => {\n                                resolve(count === 0);\n                            });\n                        });\n                    }, pathMessage, type);\n                }\n            });\n        }\n    });\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../node_modules/mongoose-unique-validator/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}}],"sources":{"../../node_modules/mongoose-unique-validator/index.js":"'use strict';\n\nconst each = require('lodash.foreach');\nconst get = require('lodash.get');\n\n// Function typecheck helper\nconst isFunc = (val) => typeof val === 'function';\n\nconst deepPath = function(schema, pathName) {\n    let path;\n    const paths = pathName.split('.');\n\n    if (paths.length > 1) {\n        pathName = paths.shift();\n    }\n\n    if (isFunc(schema.path)) {\n        path = schema.path(pathName);\n    }\n\n    if (path && path.schema) {\n        path = deepPath(path.schema, paths.join('.'));\n    }\n\n    return path;\n};\n\n// Export the mongoose plugin\nmodule.exports = function(schema, options) {\n    options = options || {};\n    const type = options.type || 'unique';\n    const message = options.message || 'Error, expected `{PATH}` to be unique. Value: `{VALUE}`';\n\n    // Mongoose Schema objects don't describe default _id indexes\n    // https://github.com/Automattic/mongoose/issues/5998\n    const indexes = [[{ _id: 1 }, { unique: true }]].concat(schema.indexes());\n\n    // Dynamically iterate all indexes\n    each(indexes, (index) => {\n        const indexOptions = index[1];\n\n        if (indexOptions.unique) {\n            const paths = Object.keys(index[0]);\n            each(paths, (pathName) => {\n                // Choose error message\n                const pathMessage = typeof indexOptions.unique === 'string' ? indexOptions.unique : message;\n\n                // Obtain the correct path object\n                const path = deepPath(schema, pathName) || schema.path(pathName);\n\n                if (path) {\n                    // Add an async validator\n                    path.validate(function() {\n                        return new Promise((resolve) => {\n                            const isSubdocument = isFunc(this.ownerDocument);\n                            const isQuery = this.constructor.name === 'Query';\n                            const parentDoc = isSubdocument ? this.ownerDocument() : this;\n                            const isNew = typeof parentDoc.isNew === 'boolean' ? parentDoc.isNew : !isQuery;\n\n                            let conditions = [];\n                            each(paths, (name) => {\n                                let pathValue;\n\n                                // If the doc is a query, this is a findAndUpdate\n                                if (isQuery) {\n                                    pathValue = get(this, '_update.' + name) || get(this, '_update.$set.' + name);\n                                } else {\n                                    pathValue = get(this, isSubdocument ? name.split('.').pop() : name);\n                                }\n\n                                // Wrap with case-insensitivity\n                                if (get(path, 'options.uniqueCaseInsensitive') || indexOptions.uniqueCaseInsensitive) {\n                                    // Escape RegExp chars\n                                    pathValue = pathValue.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n                                    pathValue = new RegExp('^' + pathValue + '$', 'i');\n                                }\n\n                                conditions.push({ [name]: pathValue });\n                            });\n\n                            if (!isNew) {\n                                // Use conditions the user has with find*AndUpdate\n                                if (isQuery) {\n                                    each(this._conditions, (value, key) => {\n                                        conditions.push({ [key]: { $ne: value } });\n                                    });\n                                } else if (this._id) {\n                                    conditions.push({ _id: { $ne: this._id } });\n                                }\n                            }\n\n                            // Obtain the model depending on context\n                            // https://github.com/Automattic/mongoose/issues/3430\n                            // https://github.com/Automattic/mongoose/issues/3589\n                            let model;\n                            if (isQuery) {\n                                model = this.model;\n                            } else if (isSubdocument) {\n                                model = this.ownerDocument().model(this.ownerDocument().constructor.modelName);\n                            } else if (isFunc(this.model)) {\n                                model = this.model(this.constructor.modelName);\n                            }\n\n                            model.where({ $and: conditions }).countDocuments((err, count) => {\n                                resolve(count === 0);\n                            });\n                        });\n                    }, pathMessage, type);\n                }\n            });\n        }\n    });\n};\n"},"lineCount":114}},"error":null,"hash":"e0671f13eeee569e570c36fa3d94d2c7","cacheData":{"env":{}}}